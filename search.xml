<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Wireless Sensing Based Self-Quarantine Monitoring System</title>
    <url>/archives/3ac6c873.html</url>
    <content><![CDATA[<h1>CSI-Based Efficient Self-Quarantine Monitoring System Using Branchy Convolution Neural Network</h1>
<blockquote>
<p>该工作目前已投稿至 <a href="https://wfiot2022.iot.ieee.org/">WF-IoT 2022</a>。代码即将<a href="">开源</a>，欢迎各位同学大佬们前来指点指点 <span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>. 持续更新中</p>
</blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Wi-Fi Sensing</category>
        <category>Activity Detection</category>
        <category>Python</category>
        <category>Deep Learning</category>
      </categories>
      <tags>
        <tag>Raspberry Pi 4</tag>
        <tag>Channel State Information</tag>
        <tag>COVID-19</tag>
        <tag>CNN</tag>
      </tags>
  </entry>
  <entry>
    <title>CS61A Disc09 - Linked Lists &amp; Trees</title>
    <url>/archives/4fd3fcd6.html</url>
    <content><![CDATA[<h1>CS61A Summer20 Disc09</h1>
<blockquote>
<p>我已经将目前完成的作业代码放到 <code>github</code> 上， 有兴趣的小伙伴可以去 <code>fork</code> 一份源码到你的仓库并 <code>clone</code> 到本地， &lt;&lt;&lt;&lt;&lt;<a href="https://github.com/GuoJingtao-1997/CS61A-SU2020">源代码下载</a>&gt;&gt;&gt;&gt;&gt;</p>
</blockquote>
<ul>
<li>点击 <a href="https://inst.eecs.berkeley.edu/~cs61a/su20/">访问</a> 直达这门课程的网站，</li>
<li><code>B站</code> 上有对应网课视频，点击 <a href="https://www.bilibili.com/video/BV1nJ41157p6">观看</a></li>
</ul>
<hr>
<h2 id="Linked-Lists">Linked Lists</h2>
<h3 id="Implementation">Implementation</h3>
<p>A linked list is either an empty linked list, or a Link object containing a <code>first</code> value and the <code>rest</code> of the linked list.</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Link</span><span class="token punctuation">:</span>
    empty <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> first<span class="token punctuation">,</span> rest<span class="token operator">=</span>empty<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">assert</span> rest <span class="token keyword">is</span> Link<span class="token punctuation">.</span>empty <span class="token keyword">or</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>rest<span class="token punctuation">,</span> Link<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>first <span class="token operator">=</span> first
        self<span class="token punctuation">.</span>rest <span class="token operator">=</span> rest

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Mainly used for debugging and development"""</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>rest<span class="token punctuation">:</span>
            rest_str <span class="token operator">=</span> <span class="token string">","</span> <span class="token operator">+</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>rest<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            rest_str <span class="token operator">=</span> <span class="token string">" "</span>
        <span class="token keyword">return</span> <span class="token string">'Link{0}{1}'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">,</span> rest_str<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Used to describe the object to the end user"""</span>
        string <span class="token operator">=</span> <span class="token string">'&lt;'</span>
        <span class="token keyword">while</span> self<span class="token punctuation">.</span>rest <span class="token operator">!=</span> Link<span class="token punctuation">.</span>empty<span class="token punctuation">:</span>
            string <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span>
            self <span class="token operator">=</span> self<span class="token punctuation">.</span>rest
        <span class="token keyword">return</span> string <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&gt;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Q1-Sum-Nums">Q1: Sum Nums</h3>
<p>Write a function <code>sum_nums</code> that takes in a linked list and returns the sum of all its elements. You may assume all elements in <code>lnk</code> are integers.</p>
<p><font face="Times New Roman" color="red" style="font-weight:bold">My Solution (Iteration)</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_nums</span><span class="token punctuation">(</span>lnk<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    &gt;&gt;&gt; a = Link(1, Link(6, Link(7)))
    &gt;&gt;&gt; sum_nums(a)
    14
    """</span>
    nums <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">while</span> lnk <span class="token keyword">is</span> <span class="token keyword">not</span> Link<span class="token punctuation">.</span>empty<span class="token punctuation">:</span>
        nums <span class="token operator">+=</span> lnk<span class="token punctuation">.</span>first
        lnk <span class="token operator">=</span> lnk<span class="token punctuation">.</span>rest
    <span class="token keyword">return</span> nums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font face="Times New Roman" color="red">PDF Solution (Recursion)</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum_nums</span><span class="token punctuation">(</span>lnk<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    &gt;&gt;&gt; a = Link(1, Link(6, Link(7)))
    &gt;&gt;&gt; sum_nums(a)
    14
    """</span>
    <span class="token keyword">if</span> lnk <span class="token operator">==</span> Link<span class="token punctuation">.</span>empty<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">return</span> lnk<span class="token punctuation">.</span>first <span class="token operator">+</span> sum_nums<span class="token punctuation">(</span>lnk<span class="token punctuation">.</span>rest<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Q2-Multiply-Links">Q2: Multiply Links</h3>
<p>Write a function that takes in a <code>Python list of linked lists</code> and multiplies them element-wise. It should return a <font face="Times New Roman" color="red" style="font-weight:bold">new linked list</font>.</p>
<p>If not all of the Link objects are of equal length, return a linked list whose length is<br>
that of the shortest <font face="Times New Roman" color="red" style="font-weight:bold">shortest</font> linked list given. You may assume the Link objects are shallow linked lists, and that lst of lnks contains at least one linked list.</p>
<p><font face="Times New Roman" color="red" style="font-weight:bold">My Solution (Recursion)</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multiply_lnks</span><span class="token punctuation">(</span>lis_of_lnks<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    &gt;&gt;&gt; a = Link(2, Link(3, Link(5)))
    &gt;&gt;&gt; b = Link(6, Link(4, Link(2)))
    &gt;&gt;&gt; c = Link(4, Link(1, Link(0, Link(2))))
    &gt;&gt;&gt; p = multiply_lnks([a, b, c])
    &gt;&gt;&gt; p.first
    48
    &gt;&gt;&gt; p.rest.first
    12
    &gt;&gt;&gt; p.rest.rest.rest is Link.empty
    True
    """</span>
    mul <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lis_of_lnks<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> lis_of_lnks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">is</span> Link<span class="token punctuation">.</span>empty<span class="token punctuation">:</span>
            <span class="token keyword">return</span> Link<span class="token punctuation">.</span>empty
        mul <span class="token operator">*=</span> lis_of_lnks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first
        lis_of_lnks<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> lis_of_lnks<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>rest
    <span class="token keyword">return</span> Link<span class="token punctuation">(</span>mul<span class="token punctuation">,</span> multiply_lnks<span class="token punctuation">(</span>lis_of_lnks<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font face="Times New Roman" color="red" style="font-weight:bold">PDF Solution (Recursion)</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multiply_lnks</span><span class="token punctuation">(</span>lis_of_lnks<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    &gt;&gt;&gt; a = Link(2, Link(3, Link(5)))
    &gt;&gt;&gt; b = Link(6, Link(4, Link(2)))
    &gt;&gt;&gt; c = Link(4, Link(1, Link(0, Link(2))))
    &gt;&gt;&gt; p = multiply_lnks([a, b, c])
    &gt;&gt;&gt; p.first
    48
    &gt;&gt;&gt; p.rest.first
    12
    &gt;&gt;&gt; p.rest.rest.rest is Link.empty
    True
    """</span>
    product <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> lnk <span class="token keyword">in</span> lst_of_lnks<span class="token punctuation">:</span>
        <span class="token keyword">if</span> lnk <span class="token keyword">is</span> Link<span class="token punctuation">.</span>empty<span class="token punctuation">:</span>
            <span class="token keyword">return</span> Link<span class="token punctuation">.</span>empty
        product <span class="token operator">*=</span> lnk<span class="token punctuation">.</span>first
    lst_of_lnks_rests <span class="token operator">=</span> <span class="token punctuation">[</span>lnk<span class="token punctuation">.</span>rest <span class="token keyword">for</span> lnk <span class="token keyword">in</span> lst_of_lnks<span class="token punctuation">]</span> 
    <span class="token keyword">return</span> Link<span class="token punctuation">(</span>product<span class="token punctuation">,</span> multiply_lnks<span class="token punctuation">(</span>lst_of_lnks_rests<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>The PDF recursive solution shown above seems to be similar to mine.</p>
<p><font face="Times New Roman" color="red" style="font-weight:bold">PDF Solution (Iteration)</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multiply_lnks</span><span class="token punctuation">(</span>lis_of_lnks<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    &gt;&gt;&gt; a = Link(2, Link(3, Link(5)))
    &gt;&gt;&gt; b = Link(6, Link(4, Link(2)))
    &gt;&gt;&gt; c = Link(4, Link(1, Link(0, Link(2))))
    &gt;&gt;&gt; p = multiply_lnks([a, b, c])
    &gt;&gt;&gt; p.first
    48
    &gt;&gt;&gt; p.rest.first
    12
    &gt;&gt;&gt; p.rest.rest.rest is Link.empty
    True
    """</span>
    <span class="token keyword">import</span> operator
    <span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span> 
    <span class="token keyword">def</span> <span class="token function">prod</span><span class="token punctuation">(</span>factors<span class="token punctuation">)</span><span class="token punctuation">:</span> 
        <span class="token keyword">return</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span>operator<span class="token punctuation">.</span>mul<span class="token punctuation">,</span> factors<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    
    head <span class="token operator">=</span> Link<span class="token punctuation">.</span>empty
    tail <span class="token operator">=</span> head
    <span class="token keyword">while</span> Link<span class="token punctuation">.</span>empty <span class="token keyword">not</span> <span class="token keyword">in</span> lst_of_lnks<span class="token punctuation">:</span>
        all_prod <span class="token operator">=</span> prod<span class="token punctuation">(</span><span class="token punctuation">[</span>l<span class="token punctuation">.</span>first <span class="token keyword">for</span> l <span class="token keyword">in</span> lst_of_lnks<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> head <span class="token keyword">is</span> Link<span class="token punctuation">.</span>empty<span class="token punctuation">:</span>
            head <span class="token operator">=</span> Link<span class="token punctuation">(</span>all_prod<span class="token punctuation">)</span> 
            tail <span class="token operator">=</span> head
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            tail<span class="token punctuation">.</span>rest <span class="token operator">=</span> Link<span class="token punctuation">(</span>all_prod<span class="token punctuation">)</span> 
            tail <span class="token operator">=</span> tail<span class="token punctuation">.</span>rest
        lst_of_lnks <span class="token operator">=</span> <span class="token punctuation">[</span>l<span class="token punctuation">.</span>rest <span class="token keyword">for</span> l <span class="token keyword">in</span> lst_of_lnks<span class="token punctuation">]</span>
    <span class="token keyword">return</span> head<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><code>reduce()</code> is a function that apply function of two arguments cumulatively to the items of iterable, from left to right, so as to reduce the iterable to a single value. The syntax is <font face="Times New Roman" color="red" style="font-weight:bold">reduce(function, iterable[, initializer])</font></p>
</blockquote>
<h3 id="Q3-Filter-Link">Q3: Filter Link</h3>
<p>Implement <code>filter_link</code>, which takes in a linked list <code>link</code> and a function <code>f</code> and<br>
returns a generator which yields the values of link for which f returns <code>True</code>.</p>
<p>Try to implement this both using a while loop and without using any form of<br>
iteration !</p>
<p><font face="Times New Roman" color="red" style="font-weight:bold">My Solution (Generator)</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_link</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    &gt;&gt;&gt; link = Link(1, Link(2, Link(3)))
    &gt;&gt;&gt; g = filter_link(link, lambda x: x % 2 == 0)
    &gt;&gt;&gt; next(g)
    2
    &gt;&gt;&gt; next(g)
    StopIteration
    &gt;&gt;&gt; list(filter_link(link, lambda x: x % 2 != 0))
    [1, 3]
    """</span>
    <span class="token keyword">while</span> link <span class="token operator">!=</span> Link<span class="token punctuation">.</span>empty<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> f<span class="token punctuation">(</span>link<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">yield</span> link<span class="token punctuation">.</span>first
            link <span class="token operator">=</span> link<span class="token punctuation">.</span>rest
        <span class="token keyword">except</span> StopIteration<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"StopIteration"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font face="Times New Roman" color="red" style="font-weight:bold">My Solution (Recursion)</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">filter_no_iter</span><span class="token punctuation">(</span>link<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    &gt;&gt;&gt; link = Link(1, Link(2, Link(3)))
    &gt;&gt;&gt; list(filter_link(link, lambda x: x % 2 != 0))
    [1, 3]
    """</span> 
    <span class="token keyword">if</span> link <span class="token keyword">is</span> Link<span class="token punctuation">.</span>empty<span class="token punctuation">:</span>
        <span class="token keyword">return</span> 
    <span class="token keyword">elif</span> f<span class="token punctuation">(</span>link<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>link<span class="token punctuation">.</span>first<span class="token punctuation">]</span> <span class="token operator">+</span> filter_no_iter<span class="token punctuation">(</span>link<span class="token punctuation">.</span>rest<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Trees">Trees</h2>
<h3 id="Implementation-2">Implementation</h3>
<p>A tree is defined as having a <code>label</code> and some<br>
<code>branches</code>. Previously, we implemented the tree abstraction using Python lists. Let’s<br>
look at another implementation using objects instead:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Tree</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> label<span class="token punctuation">,</span> branches<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> b <span class="token keyword">in</span> branches<span class="token punctuation">:</span>
            <span class="token keyword">assert</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> Tree<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>label <span class="token operator">=</span> label
        self<span class="token punctuation">.</span>branches <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>branches<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">is_leaf</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>branches

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Mainly used for debugging and development"""</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>branches<span class="token punctuation">:</span>
            tree_str <span class="token operator">=</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token builtin">repr</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>branches<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            tree_str <span class="token operator">=</span> <span class="token string">""</span>
        <span class="token keyword">return</span>  <span class="token string">"Tree({0}{1})"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>label<span class="token punctuation">,</span> tree_str<span class="token punctuation">)</span>

    
    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""Used to describe the object to the end user"""</span>
        <span class="token keyword">def</span> <span class="token function">print_tree</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            tree_str <span class="token operator">=</span> <span class="token string">'  '</span> <span class="token operator">*</span> indent <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>label<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>
            <span class="token keyword">for</span> b <span class="token keyword">in</span> t<span class="token punctuation">.</span>branches<span class="token punctuation">:</span>
                tree_str <span class="token operator">+=</span> print_tree<span class="token punctuation">(</span>b<span class="token punctuation">,</span> indent <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> tree_str
        <span class="token keyword">return</span> print_tree<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Q4-Make-Even">Q4: Make Even</h3>
<p>Define a function <code>make_even</code> which takes in a tree <code>t</code> whose values are integers, and<br>
mutates the tree such that all the odd integers are increased by 1 and all the even<br>
integers remain the same.</p>
<p><font face="Times New Roman" color="red" style="font-weight:bold">My Solution</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_even</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    &gt;&gt;&gt; t = Tree(1, [Tree(5, [Tree(3)]), Tree(4), Tree(5)])
    &gt;&gt;&gt; make_even(t)
    &gt;&gt;&gt; t.label
    2
    &gt;&gt;&gt; t.branches[0].branches[0].label
    4
    &gt;&gt;&gt; t.branches[0].label
    6
    """</span>
    <span class="token keyword">if</span> t<span class="token punctuation">.</span>is_leaf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span>
    <span class="token keyword">elif</span> t<span class="token punctuation">.</span>label <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        t<span class="token punctuation">.</span>label <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> b <span class="token keyword">in</span> t<span class="token punctuation">.</span>branches<span class="token punctuation">:</span>
        <span class="token keyword">if</span> b<span class="token punctuation">.</span>label <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            b<span class="token punctuation">.</span>label <span class="token operator">+=</span> <span class="token number">1</span>
        make_even<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font face="Times New Roman" color="red" style="font-weight:bold">PDF Solution</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">make_even</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    &gt;&gt;&gt; t = Tree(1, [Tree(5, [Tree(3)]), Tree(4), Tree(5)])
    &gt;&gt;&gt; make_even(t)
    &gt;&gt;&gt; t.label
    2
    &gt;&gt;&gt; t.branches[0].branches[0].label
    4
    &gt;&gt;&gt; t.branches[0].label
    6
    """</span>
    <span class="token keyword">if</span> t<span class="token punctuation">.</span>label <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
        t<span class="token punctuation">.</span>label <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> b <span class="token keyword">in</span> t<span class="token punctuation">.</span>branches<span class="token punctuation">:</span>
        make_even<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Q5-Square-Tree">Q5: Square Tree</h3>
<p>Define a function <code>square_tree(t)</code> that squares every value in the non-empty tree<br>
<code>t</code>. You can assume that every value is a number.</p>
<p><font face="Times New Roman" color="red" style="font-weight:bold">My Solution</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">square_tree</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    Mutates a Tree t by squaring all its elements.

    &gt;&gt;&gt; t = Tree(2, [Tree(5, [Tree(3)]), Tree(4), Tree(5)])
    &gt;&gt;&gt; square_tree(t)
    &gt;&gt;&gt; t.label
    4
    &gt;&gt;&gt; t.branches[0].branches[0].label
    9
    &gt;&gt;&gt; t.branches[0].label
    25
    """</span>
    t<span class="token punctuation">.</span>label <span class="token operator">**=</span> <span class="token number">2</span>
    <span class="token keyword">for</span> b <span class="token keyword">in</span> t<span class="token punctuation">.</span>branches<span class="token punctuation">:</span>
        square_tree<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Q6-Find-Path">Q6: Find Path</h3>
<p>Define the procedure <code>find_path</code> that, given a Tree <code>t</code> and an <code>entry</code>, returns a list containing the nodes along the path required to get from the <code>root of t</code> to entry. If entry is not present in t, return <code>False</code>.</p>
<p>Assume that the elements in <code>t</code> are unique. Find the path to an element.</p>
<p><img src="https://cdn.jsdelivr.net/gh/GuoJingtao-1997/PicBed/BlogImg/Tree0.png" alt="Tree diagram for tree_ex instance"></p>
<p><font face="Times New Roman" color="red" style="font-weight:bold">Solution for Returning the First Possible Path</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_path</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    Return False if entry is not present in t, 
    else return a path from the root of t to entry

    &gt;&gt;&gt; tree_ex = Tree(2, [Tree(7, [Tree(3), Tree(6, [Tree(5), Tree(11)])]), Tree(5)])
    &gt;&gt;&gt; find_path(tree_ex, 5)
    [2, 7, 6, 5]
    &gt;&gt;&gt; find_path(tree_ex, 12)
    False
    """</span>
    <span class="token keyword">if</span> t<span class="token punctuation">.</span>label <span class="token operator">==</span> entry<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>entry<span class="token punctuation">]</span>
    <span class="token keyword">for</span> b <span class="token keyword">in</span> t<span class="token punctuation">.</span>branches<span class="token punctuation">:</span>
        path <span class="token operator">=</span> find_path<span class="token punctuation">(</span>b<span class="token punctuation">,</span> entry<span class="token punctuation">)</span>
        <span class="token keyword">if</span> path<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token punctuation">[</span>t<span class="token punctuation">.</span>label<span class="token punctuation">]</span> <span class="token operator">+</span> path
    <span class="token keyword">return</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font face="Times New Roman" color="red" style="font-weight:bold">Solution for Returning All Possible Paths</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_path</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    Return False if entry is not present in t, 
    else return a path from the root of t to entry

    &gt;&gt;&gt; tree_ex = Tree(2, [Tree(7, [Tree(3), Tree(6, [Tree(5), Tree(11)])]), Tree(5)])
    &gt;&gt;&gt; find_path(tree_ex, 5)
    [[2, 7, 6, 5], [2, 5]]
    &gt;&gt;&gt; find_path(tree_ex, 12)
    False
    """</span>
    <span class="token keyword">def</span> <span class="token function">helper</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">:</span>
        paths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> t<span class="token punctuation">.</span>label <span class="token operator">==</span> entry<span class="token punctuation">:</span>
            paths<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>entry<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> b <span class="token keyword">in</span> t<span class="token punctuation">.</span>branches<span class="token punctuation">:</span>
            <span class="token keyword">for</span> path <span class="token keyword">in</span> helper<span class="token punctuation">(</span>b<span class="token punctuation">,</span> entry<span class="token punctuation">)</span><span class="token punctuation">:</span>
                paths<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>t<span class="token punctuation">.</span>label<span class="token punctuation">]</span> <span class="token operator">+</span> path<span class="token punctuation">)</span>
        <span class="token keyword">return</span> paths
    paths <span class="token operator">=</span> helper<span class="token punctuation">(</span>t<span class="token punctuation">,</span> entry<span class="token punctuation">)</span>
    <span class="token keyword">return</span> paths <span class="token keyword">if</span> paths <span class="token keyword">else</span> <span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Q7-Average">Q7: Average</h3>
<p>Assuming that every value in <code>t</code> is a number, define <code>average(t)</code>, which returns the average of all the values in t. You may not need to use all the provided lines.</p>
<p><font face="Times New Roman" color="red" style="font-weight:bold">My Solution</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">average</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    Return the average value of all the nodes in t.

    &gt;&gt;&gt; t0 = Tree(0, [Tree(1), Tree(2, [Tree(3)])])
    &gt;&gt;&gt; average(t0)
    1.5
    &gt;&gt;&gt; t1 = Tree(8, [t0, Tree(4)])
    &gt;&gt;&gt; average(t1)
    3.0
    """</span>
    <span class="token keyword">def</span> <span class="token function">sum_helper</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>
        total<span class="token punctuation">,</span> count <span class="token operator">=</span> t<span class="token punctuation">.</span>label<span class="token punctuation">,</span> <span class="token number">1</span>
        <span class="token keyword">for</span> b <span class="token keyword">in</span> t<span class="token punctuation">.</span>branches<span class="token punctuation">:</span>
            total_b<span class="token punctuation">,</span> count_b  <span class="token operator">=</span> sum_helper<span class="token punctuation">(</span>b<span class="token punctuation">)</span>
            total<span class="token punctuation">,</span> count <span class="token operator">=</span> total <span class="token operator">+</span> total_b<span class="token punctuation">,</span> count <span class="token operator">+</span> count_b
        <span class="token keyword">return</span> total<span class="token punctuation">,</span> count
    total<span class="token punctuation">,</span> count <span class="token operator">=</span> sum_helper<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
    <span class="token keyword">return</span> total <span class="token operator">/</span> count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Q8-Combine-Tree">Q8: Combine Tree</h3>
<p>Write a function that combines the values of two trees <code>t1</code> and <code>t2</code> together with the <code>combiner</code> function. Assume that t1 and t2 have identical structure. This function should return a <font face="Times New Roman" color="red" style="font-weight:bold">new</font> tree</p>
<p>Hint: consider using the <code>zip()</code> function, which returns an iterator of tuples where<br>
the first items of each iterable object passed in form the first tuple, the second items<br>
are paired together and form the second tuple, and so on and so forth.</p>
<p><font face="Times New Roman" color="red" style="font-weight:bold">My Solution</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">combine_tree</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> combiner<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    Combines the values of two trees t1 and t2 together with the combiner function
    This function should return a new tree.
    
    &gt;&gt;&gt; a = Tree(1, [Tree(2, [Tree(3)])])
    &gt;&gt;&gt; b = Tree(4, [Tree(5, [Tree(6)])])
    &gt;&gt;&gt; combined = combine_tree(a, b, mul)
    &gt;&gt;&gt; combined.label
    4
    &gt;&gt;&gt; combined.branches[0].label
    10
    """</span>
    t <span class="token operator">=</span> Tree<span class="token punctuation">(</span>combiner<span class="token punctuation">(</span>t1<span class="token punctuation">.</span>label<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>branches<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>branches<span class="token punctuation">)</span><span class="token punctuation">:</span>
        t <span class="token operator">=</span> Tree<span class="token punctuation">(</span>combiner<span class="token punctuation">(</span>t1<span class="token punctuation">.</span>label<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>combine_tree<span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> combiner<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font face="Times New Roman" color="red" style="font-weight:bold">PDF Solution Using List Comprehension</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">combine_tree</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> combiner<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    Combines the values of two trees t1 and t2 together with the combiner function
    This function should return a new tree.
    
    &gt;&gt;&gt; a = Tree(1, [Tree(2, [Tree(3)])])
    &gt;&gt;&gt; b = Tree(4, [Tree(5, [Tree(6)])])
    &gt;&gt;&gt; combined = combine_tree(a, b, mul)
    &gt;&gt;&gt; combined.label
    4
    &gt;&gt;&gt; combined.branches[0].label
    10
    """</span>
    branch <span class="token operator">=</span> <span class="token punctuation">[</span>combine_tree<span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> combiner<span class="token punctuation">)</span> <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>t1<span class="token punctuation">.</span>branches<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>branches<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> Tree<span class="token punctuation">(</span>combiner<span class="token punctuation">(</span>t1<span class="token punctuation">.</span>label<span class="token punctuation">,</span> t2<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">,</span> branch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Q9-Alternate-Tree-Map">Q9: Alternate Tree Map</h3>
<p>Implement the <code>alt_tree_map</code> function that, given a <code>function</code> and a <code>Tree</code>, applies the <code>function</code> to all of the data<br>
at every other level of the tree,starting at the root</p>
<p><font face="Times New Roman" color="red" style="font-weight:bold">My Solution Using Help Function</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">alt_tree_map</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> map_fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    &gt;&gt;&gt; t = Tree(1, [Tree(2, [Tree(3)]), Tree(4)])
    &gt;&gt;&gt; negate = lambda x: -x
    &gt;&gt;&gt; alt_tree_map(t, negate)
    Tree(-1, [Tree(2, [Tree(-3)]), Tree(4)])
    """</span>
    <span class="token keyword">def</span> <span class="token function">map_helper</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> depth<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> depth <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            t<span class="token punctuation">.</span>label <span class="token operator">=</span> map_fn<span class="token punctuation">(</span>t<span class="token punctuation">.</span>label<span class="token punctuation">)</span>
        <span class="token keyword">for</span> b <span class="token keyword">in</span> t<span class="token punctuation">.</span>branches<span class="token punctuation">:</span>
            map_helper<span class="token punctuation">(</span>b<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> t
    <span class="token keyword">return</span> map_helper<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><font face="Times New Roman" color="red" style="font-weight:bold">PDF Solution With Returning a New Tree and Using List Comprehension</font></p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">alt_tree_map</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> map_fn<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""
    &gt;&gt;&gt; t = Tree(1, [Tree(2, [Tree(3)]), Tree(4)])
    &gt;&gt;&gt; negate = lambda x: -x
    &gt;&gt;&gt; alt_tree_map(t, negate)
    Tree(-1, [Tree(2, [Tree(-3)]), Tree(4)])
    """</span>
    label<span class="token punctuation">,</span> branch <span class="token operator">=</span> map_fn<span class="token punctuation">(</span>t<span class="token punctuation">.</span>label<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> b <span class="token keyword">in</span> t<span class="token punctuation">.</span>branches<span class="token punctuation">:</span>
        b0 <span class="token operator">=</span> <span class="token punctuation">[</span>alt_tree_map<span class="token punctuation">(</span>bb<span class="token punctuation">,</span> map_fn<span class="token punctuation">)</span> <span class="token keyword">for</span> bb <span class="token keyword">in</span> b<span class="token punctuation">.</span>branches<span class="token punctuation">]</span>
        branch<span class="token punctuation">.</span>append<span class="token punctuation">(</span>Tree<span class="token punctuation">(</span>b<span class="token punctuation">.</span>label<span class="token punctuation">,</span> b0<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> Tree<span class="token punctuation">(</span>label<span class="token punctuation">,</span> branch<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Disc09</tag>
        <tag>Data Structure</tag>
        <tag>CS61A Summer20</tag>
        <tag>SICP for Python</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你用 GitHub+PicGo+jsDelivr 搭建免费的博客图床</title>
    <url>/archives/1d23231.html</url>
    <content><![CDATA[<blockquote>
<p>利用 <em>GitHub</em> 和 <em>PicGo</em> 可以很方便的搭建私人图床</p>
</blockquote>
<h2 id="特点">特点</h2>
<ul>
<li>
<p>实现图片文件的固定链接访问，使 <code>Markdown</code> 格式文章插入图片更方便</p>
</li>
<li>
<p><code>GitHub</code> 仓库搭建图床操作简单且无需额外付费</p>
</li>
<li>
<p><a href="https://www.jsdelivr.com/">jsDelivr</a> <code>CDN</code> 加速访问，解决国内 <code>GitHub</code> 访问速度慢的问题</p>
</li>
</ul>
<h2 id="GitHub">GitHub</h2>
<h3 id="注册-GitHub-账号">注册 GitHub 账号</h3>
<p>在配置 <code>GitHub</code> 仓库之前我们要先拥有一个 <code>GitHub</code> 账号，如果你还没有的话，不妨点击<a href="https://github.com/join" title="github注册链接">这里</a>前往注册。</p>
<h3 id="创建-GitHub-仓库">创建 GitHub 仓库</h3>
<p>注册完毕后我们会看到以下界面，这里我们点击 <code>New</code> 创建一个新仓库</p>
<p><img src="https://cdn.jsdelivr.net/gh/GuoJingtao-1997/PicBed/BlogImg/20200517125202.jpg" alt="GitHub 界面"></p>
<p>点击 <code>New</code> 之后页面会跳转至如下界面，在该界面我们需要对仓库进行配置，具体填写步骤可参考图片内的指引</p>
<p><img src="https://cdn.jsdelivr.net/gh/GuoJingtao-1997/PicBed/BlogImg/20200517153638.jpg" alt="配置仓库属性"></p>
<blockquote>
<p><strong>注：</strong> 仓库类型如果选为私有，则在 <em>PicGo</em> 的相册中将看不到上传后的图片，建议设为公有，因此我们在上传图片到图床时要注意保护个人隐私</p>
</blockquote>
<p>设置完毕后点击下方按钮即可创建仓库，仓库的界面如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/GuoJingtao-1997/PicBed/BlogImg/20200517181126.jpg" alt="仓库界面"></p>
<h3 id="生成-token">生成 token</h3>
<p>在使用 <code>GitHub</code> 图床时我们需要先生成一个 <a href="https://baike.baidu.com/item/Token/2615248">token</a>,生成过程也十分简单。</p>
<p>首先我们点击 <code>GitHub</code> 首页的用户头像并点击 <code>Settings</code> 进入设置界面，如图</p>
<p><img src="https://cdn.jsdelivr.net/gh/GuoJingtao-1997/PicBed/BlogImg/20200517204558.jpg" alt="Settings 界面"></p>
<p>进入之后我们下拉至底部，点击 <code>Developer settings</code> 并选择第三个选项后，点击右上角的 <code>Generate new token</code> 进入配置界面，根据下图完成 <code>token</code> 的配置，并下拉至底部点击 <code>Generate token</code> 完成 <code>token</code> 的生成，之后即可直接将 <code>token</code> 复制到 <code>PicGo</code> 中。</p>
<p><img src="https://cdn.jsdelivr.net/gh/GuoJingtao-1997/PicBed/BlogImg/20200517125204.jpg" alt="配置 token"></p>
<p><img src="https://cdn.jsdelivr.net/gh/GuoJingtao-1997/PicBed/BlogImg/20200517125206.jpg" alt="生成的 token"></p>
<blockquote>
<p><strong>注：</strong>  <em>token</em> 只出现一次，因此我们需将其备份起来</p>
</blockquote>
<h2 id="PicGo">PicGo</h2>
<h3 id="下载-PicGo">下载 PicGo</h3>
<p>在使用 <code>PicGo</code> 前我们需要先到以下链接去下载,建议选择最新的稳定版本，<code>Beta</code> 版本稳定性相对没那么好。</p>
<p><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p>
<p>如果不是下载安装包，想看源码的话，可以选择 <code>git clone https://github.com/Molunerfinn/PicGo.git</code> 克隆到本地</p>
<blockquote>
<p><strong>注：</strong> <code>Mac</code> 用户选择 <code>.dmg</code> 下载， <code>Windows</code> 用户选择 <code>.exe</code> 下载。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/GuoJingtao-1997/PicBed/BlogImg/20200518210625.jpg" alt="下载界面"></p>
<p>安装完毕，打开后会以小图标形式显示在屏幕右下角，点击小图标即可打开详细窗口，窗口界面还是十分简洁大方的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/GuoJingtao-1997/PicBed/BlogImg/20200518210623.jpg" alt="PicGo 小图标"></p>
<h3 id="配置-PicGo">配置 PicGo</h3>
<p>之后打开 <code>PicGo</code> 选择 <code>GitHub</code> 图床进行配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/GuoJingtao-1997/PicBed/BlogImg/20200517125205.jpg" alt="PicGo 界面"></p>
<ul>
<li>
<p>仓库名的格式为 <code>用户名/仓库</code> 比如我之前创建了一个 <code>PicBed</code> 的仓库，则我需要填入 <code>GuoJingtao-1997/PicBed</code>， 分支名一般填写 <code>master</code>，<code>token</code> 则输入之前我们已生成并备份好的 <code>token</code></p>
</li>
<li>
<p>指定存储路径可选填，若填写则上传图片时 <code>GitHub</code> 仓库会自动创建新文件夹来保存图片</p>
</li>
<li>
<p>设置自定义域名会使 <code>PicGo</code> 生成的访问链接为 <code>自定义域名+文件名</code> 的格式，而由于国内访问 <code>GitHub</code> 的速度比较慢，因此我们需要使用 <code>jsDelivr CDN</code> 进行加速，将自定义域名设置为 <code>https://cdn.jsdelivr.net/gh/用户名/图床仓库名</code> 即可</p>
</li>
</ul>
<h3 id="使用-PicGo">使用 PicGo</h3>
<p>接下来就可以愉快的开耍 <code>PicGo</code> 啦，选择相应的格式并将图片拖至相应位置即可上传，之后在相册中选择自己想要的格式并点击相应的图片下方最左侧的按钮即可复制图片的链接，上传图片的格式一般采用 <code>.jpg</code>，同时为了减轻 <code>GitHub</code> 服务器的压力，建议在上传图片前可以对其进行压缩，下面提供一个可进行无损压缩的网站供大家使用</p>
<p><a href="https://tinypng.com/">https://tinypng.com/</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/GuoJingtao-1997/PicBed/BlogImg/20200517153639.jpg" alt="PicGo 相册界面"></p>
<blockquote>
<p><strong>注：</strong> 有时会出现上传失败的情况，这时可以尝试将 <em>PicGo设置</em> 里的 <em>设置Server</em> 关闭后再打开或者重启 <em>PicGo</em></p>
</blockquote>
<p>大家可以自行探索 <code>PicGo</code> 的其他用法，希望本文的内容对大家有所帮助，也欢迎大家在下方留言指出其中错误或遗漏的地方.</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>图床</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>PicGo</tag>
      </tags>
  </entry>
</search>
